{"ast":null,"code":"var _jsxFileName = \"/home/origummy/src/7th-of-october/src/components/Content.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Content = props => {\n  _s();\n  const src = props.src;\n  const details = props.details;\n  const [contentType, setContentType] = use(\"undefined\");\n  useEffect(() => {\n    const getContentType = path => {\n      const videoTypes = [\"mkv\", \"mov\", \"mp4\", \"webv\"];\n      const imageTypes = [\"png\", \"jpeg\", \"jpg\", \"webp\"];\n      const fileExtention = path === null || path === void 0 ? void 0 : path.split(\".\").pop();\n      if (fileExtention === undefined) {\n        return \"undefined\";\n      } else if (videoTypes.includes(fileExtention)) {\n        return \"video\";\n      } else if (imageTypes.includes(fileExtention)) {\n        return \"image\";\n      }\n      return \"\";\n    };\n    setContentType(getContentType(src));\n  });\n  if (contentType === \"video\") {\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      loop: true,\n      autoPlay: true,\n      id: \"graphic\",\n      style: isBlurred ? {\n        \"filter\": \"blur(2vmin);\"\n      } : {},\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: src,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  } else if (contentType === \"image\") {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: src,\n      id: \"graphic\",\n      alt: details,\n      style: isBlurred ? {\n        \"filter\": \"blur(2vmin);\"\n      } : {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Media could not be loaded.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n};\n_s(Content, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Content;\nexport default Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Content","props","_s","src","details","contentType","setContentType","use","getContentType","path","videoTypes","imageTypes","fileExtention","split","pop","undefined","includes","controls","loop","autoPlay","id","style","isBlurred","children","type","fileName","_jsxFileName","lineNumber","columnNumber","alt","_c","$RefreshReg$"],"sources":["/home/origummy/src/7th-of-october/src/components/Content.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport interface ContentProps {\n    src: string;\n    details: string;\n    children?: JSX.Element | JSX.Element[];\n}\n\nconst Content = (props: ContentProps) => {\n    const src: string = props.src;\n    const details: string = props.details;\n\n    const [contentType, setContentType] = use(\"undefined\");\n\n    useEffect(() => {\n        const getContentType = (path: string | undefined) => {\n            const videoTypes: string[] = [\"mkv\", \"mov\", \"mp4\", \"webv\"];\n            const imageTypes: string[] = [\"png\", \"jpeg\", \"jpg\", \"webp\"];\n            const fileExtention = path?.split(\".\").pop();\n\n            if (fileExtention === undefined) {\n                return \"undefined\";\n            } else if (videoTypes.includes(fileExtention)) {\n                return \"video\";\n            } else if (imageTypes.includes(fileExtention)) {\n                return \"image\";\n            }\n\n            return \"\";\n        };\n\n        setContentType(getContentType(src));\n    });\n\n    if (contentType === \"video\") {\n        return (\n            <video controls loop autoPlay id=\"graphic\" style={isBlurred ? {\"filter\": \"blur(2vmin);\"} : {}}>\n                <source src={src} type=\"video/mp4\" />\n            </video>\n        );\n    } else if (contentType === \"image\") {\n        return <img src={src} id=\"graphic\" alt={details} style={isBlurred ? {\"filter\": \"blur(2vmin);\"} : {}}/>;\n    }\n\n    return <div>Media could not be loaded.</div>;\n};\n\nexport default Content;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAcC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnD,MAAMC,OAAO,GAAIC,KAAmB,IAAK;EAAAC,EAAA;EACrC,MAAMC,GAAW,GAAGF,KAAK,CAACE,GAAG;EAC7B,MAAMC,OAAe,GAAGH,KAAK,CAACG,OAAO;EAErC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,GAAG,CAAC,WAAW,CAAC;EAEtDV,SAAS,CAAC,MAAM;IACZ,MAAMW,cAAc,GAAIC,IAAwB,IAAK;MACjD,MAAMC,UAAoB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;MAC1D,MAAMC,UAAoB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;MAC3D,MAAMC,aAAa,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;MAE5C,IAAIF,aAAa,KAAKG,SAAS,EAAE;QAC7B,OAAO,WAAW;MACtB,CAAC,MAAM,IAAIL,UAAU,CAACM,QAAQ,CAACJ,aAAa,CAAC,EAAE;QAC3C,OAAO,OAAO;MAClB,CAAC,MAAM,IAAID,UAAU,CAACK,QAAQ,CAACJ,aAAa,CAAC,EAAE;QAC3C,OAAO,OAAO;MAClB;MAEA,OAAO,EAAE;IACb,CAAC;IAEDN,cAAc,CAACE,cAAc,CAACL,GAAG,CAAC,CAAC;EACvC,CAAC,CAAC;EAEF,IAAIE,WAAW,KAAK,OAAO,EAAE;IACzB,oBACIN,OAAA;MAAOkB,QAAQ;MAACC,IAAI;MAACC,QAAQ;MAACC,EAAE,EAAC,SAAS;MAACC,KAAK,EAAEC,SAAS,GAAG;QAAC,QAAQ,EAAE;MAAc,CAAC,GAAG,CAAC,CAAE;MAAAC,QAAA,eAC1FxB,OAAA;QAAQI,GAAG,EAAEA,GAAI;QAACqB,IAAI,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAEhB,CAAC,MAAM,IAAIvB,WAAW,KAAK,OAAO,EAAE;IAChC,oBAAON,OAAA;MAAKI,GAAG,EAAEA,GAAI;MAACiB,EAAE,EAAC,SAAS;MAACS,GAAG,EAAEzB,OAAQ;MAACiB,KAAK,EAAEC,SAAS,GAAG;QAAC,QAAQ,EAAE;MAAc,CAAC,GAAG,CAAC;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAC1G;EAEA,oBAAO7B,OAAA;IAAAwB,QAAA,EAAK;EAA0B;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAChD,CAAC;AAAC1B,EAAA,CArCIF,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAuCb,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}